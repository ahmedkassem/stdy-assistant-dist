import{Y as n,I as T}from"./index.e88ad099.js";import{h as _,c as y,a as Z,e as h,o as B}from"./auth.27c9e4d6.js";import{a as k}from"./axios.21178db7.js";import{m as W,e as j,u as R,w as Q}from"./exam-question.3d01010e.js";async function U(e){try{return(await k.put(`/exam-answers/${e.id}`,{questions:e.questions,score:e.score,percent:e.percent,status:"taken"},_())).status==200?!0:(n.create("Error while updating exam answer"),!1)}catch{return n.create("Error while updating exam answer"),!1}return!1}async function X(e,t){try{const s=await k.post("/graphql",{query:`
    query{
      examAnswers(where:{
        course:`+t+`,
        student:`+e+`
      }){
        score
        percent
        pass_percent
        status
        redo_idx
        exam{
          parts
          name
          lesson{
            title
            id
          }
        }
      }
    }
    `},_());if(s.status==200)return console.log(s.data),s.data.data.examAnswers;n.create("Error while getting exam answers from server")}catch(s){n.create("Error while getting exam answers from server"),console.log(s)}return[]}async function $(e){try{const t=await k.post("/graphql",{query:`
    query{
      examAnswers(where:{
        exam:`+e+`        
      }){
        id
        score
        percent
        pass_percent
        status
        redo_idx
        questions
        student{
          id
          user{
            username
            profile{
              name
              phoneNumber
              fcmtoken
              parentPhoneNumber
              lang
            }
          }
        }
      }
    }
    `},_());if(t.status==200)return console.log(t.data),t.data.data.examAnswers;n.create("Error while getting exam answers from server")}catch(t){n.create("Error while getting exam answers from server"),console.log(t)}return[]}const O=T("lessonsS",{state:()=>({working:!1,selectedLesson:null}),getters:{lesson(){return y().selectedLesson}},actions:{getOne(e){var s,r,o,l;const t=y();if(((s=t.selectedLesson)==null?void 0:s.id)!=e){if(t.selectedLesson=null,t.selectedCourse==null){this.$router.back();return}(o=(r=t.selectedCourse)==null?void 0:r.course_sections)==null||o.forEach(c=>{var d;(d=c.lessons)==null||d.forEach(i=>{i.id==e&&(t.selectedLesson=i)})})}if(((l=t.selectedLesson)==null?void 0:l.id)==null){this.$router.back();return}},async update(e,t,s,r,o){var l;if(!(e==null||r==null)){if(e.id==null){n.create("Error in parameters, id is missing");return}if(this.working=!0,s!=null)try{console.log("uploading pdf file first");const c=await W().upload(s);console.log("file uploaded"),console.log(c),t.pdf=c.data[0].id,console.log("prepared request object"),console.log(t)}catch{n.create("Failed to upload file."),this.working=!1;return}try{if(console.log("update called"),(await k.put("/lessons/"+e.id,t,_())).status==200){this.working=!1,n.create("Updated!"),(o==null||o==!1)&&this.$router.back(),await this.updateLessonNotifications(t,o,e);const d=y();e.has_exam!=t.has_exam&&d.selectedLesson!=null&&(d.selectedLesson.has_exam=(l=t.has_exam)!=null?l:!1)}else n.create("Error while updating lesson")}catch(c){n.create("Error while updating lesson"),console.log(c)}this.working=!1}},async updateLessonNotifications(e,t,s){var r,o,l,c,d,i,f,p,m,w,a,A,S,Y,b,E;(s==null?void 0:s.has_exam)==!1&&e.has_exam==!0&&t==!0&&(await k.post("/faculties/notification",{title:(o=(r=y().selectedCourse)==null?void 0:r.name)!=null?o:"STDY",message:"there is a new exam",topics:["course_"+((l=y().selectedCourse)==null?void 0:l.id)+"_en"],courseId:(c=y().selectedCourse)==null?void 0:c.id},_()),await k.post("/faculties/notification",{title:(i=(d=y().selectedCourse)==null?void 0:d.name)!=null?i:"STDY",message:"\u064A\u0648\u062C\u062F \u0644\u062F\u064A\u0643 \u0627\u0645\u062A\u062D\u0627\u0646 \u062C\u062F\u064A\u062F",topics:["course_"+((f=y().selectedCourse)==null?void 0:f.id)+"_ar"],courseId:(p=y().selectedCourse)==null?void 0:p.id},_())),(s==null?void 0:s.has_homework)==!1&&e.has_homework==!0&&e.homework!=null&&(await k.post("/faculties/notification",{title:(w=(m=y().selectedCourse)==null?void 0:m.name)!=null?w:"STDY",message:"there is a new homework",topics:["course_"+((a=y().selectedCourse)==null?void 0:a.id)+"_en"],courseId:(A=y().selectedCourse)==null?void 0:A.id},_()),await k.post("/faculties/notification",{title:(Y=(S=y().selectedCourse)==null?void 0:S.name)!=null?Y:"STDY",message:"\u064A\u0648\u062C\u062F \u0644\u062F\u064A\u0643 \u0648\u0627\u062C\u0628 \u062C\u062F\u064A\u062F",topics:["course_"+((b=y().selectedCourse)==null?void 0:b.id)+"_ar"],courseId:(E=y().selectedCourse)==null?void 0:E.id},_()))}}}),P=T("coursesS",{state:()=>({working:!1,course:null}),getters:{selectedCourse(){return y().selectedCourse}},actions:{getOne(e){var t,s;y().selectedCourse=(s=(t=Z().user)==null?void 0:t.courseOptions.filter(r=>r.value.id==e)[0].value)!=null?s:null},async sendNotificationToSomeStudents(e,t,s,r,o){console.log("sendNotificationToSomeStudents called"),this.working=!0;try{if(o.length==0){n.create("must enter notificationTextAr"),this.working=!1;return}if(r.length==0){n.create("must enter notificationTextEn"),this.working=!1;return}t.length>0&&await k.post("/faculties/notification",{title:"STDY",message:r,tokens:t,type:"course",id:e.id},_()),s.length>0&&await k.post("/faculties/notification",{title:"STDY",message:o,tokens:s,type:"course",id:e.id},_()),t.length==0&&s.length==0?(n.create("didn't find guests with tokens that match conditions"),console.log("didn't find guests with tokens that match conditions")):(n.create("sent"),console.log("sent"))}catch(l){console.log(l),n.create("error 85")}this.working=!1}}}),L=T("examsS",{state:()=>({working:!1,exams:[],exam:null,total_score:0,difficulty:1,parts:[],tag:"",questions:0,required:!1,duration_in_minutes:120,name:"",randomize_questions:!1,randomize_answers:!1,start:h().format("DD/MM/YYYY hh:mm A Z"),end:h().format("DD/MM/YYYY hh:mm A Z"),dateFormat:"DD/MM/YYYY hh:mm A Z",pass_percent:100,redo:[],redoIdx:1,redoPassPercent:100,redoStart:h().format("DD/MM/YYYY hh:mm A Z"),redoEnd:h().format("DD/MM/YYYY hh:mm A Z"),redoColumns:[{name:"idx",label:"idx",field(e){return e.idx}},{name:"pass percent",label:"pass percent",field(e){return e.pass_percent}},{name:"start",label:"start",field(e){return h(e.start).format("DD/MM/YYYY hh:mm A Z")}},{name:"end",label:"end",field(e){return h(e.end).format("DD/MM/YYYY hh:mm A Z")}},{name:"actions",label:"actions"}]}),actions:{async getOne(e){this.exam=null;try{const t=await k.get(`/exams/${e}`,_());t.status==200?this.exam=t.data:n.create("error")}catch(t){console.log(t),n.create("error")}},async create(e,t){var r,o,l,c;const s={};s.difficulty=this.difficulty,s.course=e,s.lesson=t,s.duration_in_minutes=this.duration_in_minutes,s.name=this.name,s.randomize_answers=this.randomize_answers,s.randomize_questions=this.randomize_questions,s.parts=this.parts,s.required=this.required,s.redo=this.redo,s.pass_percent=this.pass_percent,s.start=h(this.start,this.dateFormat).utc().toISOString(),s.end=h(this.end,this.dateFormat).utc().toISOString();try{this.working=!0,console.log("create exam was called"),(await k.post("/exams",s,_())).status==200?(n.create("Created!"),console.log("will update lesson"),await O().update({id:parseInt(t)},{has_exam:!0},null,{id:e},!1),await k.post("/faculties/notification",{title:(o=(r=P().selectedCourse)==null?void 0:r.name)!=null?o:"STDY",message:"there is a new exam",topics:["course_"+e+"_en"],courseId:e},_()),await k.post("/faculties/notification",{title:(c=(l=P().selectedCourse)==null?void 0:l.name)!=null?c:"STDY",message:"\u064A\u0648\u062C\u062F \u0644\u062F\u064A\u0643 \u0627\u0645\u062A\u062D\u0627\u0646 \u062C\u062F\u064A\u062F",topics:["course_"+e+"_ar"],courseId:e},_())):n.create("Error creating new exam ")}catch(d){n.create("Error creating new exam "),console.log(d)}this.working=!1,this.$router.replace("/courses/"+e)},async createOfflineExam(e,t){var r;const s={};s.difficulty=this.difficulty,s.course=e,s.total_score=(r=this.total_score)!=null?r:0,s.offline=!0,s.lesson=t,s.duration_in_minutes=this.duration_in_minutes,s.name=this.name,s.randomize_answers=this.randomize_answers,s.randomize_questions=this.randomize_questions,s.parts=this.parts,s.required=this.required,s.redo=this.redo,s.pass_percent=this.pass_percent,s.start=h(this.start,this.dateFormat).utc().toISOString(),s.end=h(this.end,this.dateFormat).utc().toISOString();try{this.working=!0,console.log("create exam was called");const o=await k.post("/exams",s,_());o.status==200?(n.create("Created!"),console.log("will update lesson"),await O().update({id:parseInt(t)},{has_exam:!0},null,{id:e},!0),console.info("will go to offline exam page now"),await this.$router.push("/exams/"+o.data.id),location.reload()):n.create("Error creating new exam ")}catch(o){n.create("Error creating new exam "),console.log(o)}this.working=!1},async delete(e){try{this.working=!0;const t=await k.delete("/exam/"+e.id,_());this.working=!1,t.status==200?n.create("Deleted"):n.create("Error deleting exam from server")}catch(t){n.create("Error deleting exam  from server"),this.working=!1,console.log(t)}},addRow(){if(this.tag.length==0||this.parts.filter(t=>t.tag==this.tag).length>0){n.create("Please enter new tag");return}if(this.questions<=0){n.create("please enter number of questions");return}const e=j().examQuestions.filter(t=>{const s=t.tag.split(",");for(const r of this.parts)if(s.indexOf(r.tag)>=0)return!1;return s.indexOf(this.tag)>=0}).length;if(this.questions>e){n.create("please enter a valid number of questions less than or equal to the available questions with this tag: "+e);return}this.parts.push({tag:this.tag,questions:parseInt(this.questions.toString())}),this.tag="",this.questions=0},removeRow(e){var t;this.parts=(t=this.parts.filter(s=>s.tag!=e.tag))!=null?t:[]},setExam(e){var t,s,r;this.exam=e,this.difficulty=e.difficulty,this.parts=e.parts,this.tag="",this.questions=0,this.required=e.required,this.duration_in_minutes=e.duration_in_minutes,this.name=e.name,this.randomize_answers=(t=e.randomize_answers)!=null?t:!0,this.randomize_questions=(s=e.randomize_questions)!=null?s:!0,this.start=h(e.start).format(this.dateFormat),this.end=h(e.end).format(this.dateFormat),this.pass_percent=e.pass_percent,this.redo=(r=e.redo)!=null?r:[],this.redoIdx=1,this.redoStart=h().format("DD/MM/YYYY hh:mm A Z"),this.redoEnd=h().format("DD/MM/YYYY hh:mm A Z");for(const o of this.redo)o.idx>=this.redoIdx&&(this.redoIdx=o.idx+1);this.redoPassPercent=100},async update(e,t,s){const r={};if(r.difficulty=this.difficulty,r.course=t,r.lesson=s,r.duration_in_minutes=this.duration_in_minutes,r.name=this.name,r.randomize_answers=this.randomize_answers,r.randomize_questions=this.randomize_questions,r.parts=this.parts,r.required=this.required,r.start=h(this.start,this.dateFormat).utc().toISOString(),r.end=h(this.end,this.dateFormat).utc().toISOString(),r.pass_percent=this.pass_percent,r.redo=this.redo,h(r.start).isAfter(h(r.end))){n.create("error in date input, end date must be after start date");return}if(this.pass_percent<0||this.pass_percent>100){n.create("pass percent is wrong");return}try{this.working=!0,console.log("update exam was called"),(await k.put("/exams/"+e.id,r,_())).status==200?n.create("updated exam!"):n.create("Error updating exam ")}catch(o){n.create("Error updating exam "),console.log(o)}this.working=!1,this.$router.replace("/courses/"+t)},clearFields(){this.exam=null,this.difficulty=1,this.parts=[],this.tag="",this.questions=0,this.required=!1,this.duration_in_minutes=120,this.name="exam name",this.randomize_answers=!0,this.randomize_questions=!0,this.start=h().format("DD/MM/YYYY hh:mm A Z"),this.end=h().format("DD/MM/YYYY hh:mm A Z"),this.pass_percent=100,this.redo=[],this.redoIdx=1,this.redoPassPercent=100,this.redoStart=h().format("DD/MM/YYYY hh:mm A Z"),this.redoEnd=h().format("DD/MM/YYYY hh:mm A Z")},addRedo(){if(h(this.redoStart,this.dateFormat).isBefore(h(this.end,this.dateFormat))){n.create("this redo is not starting after the end of the exam");return}if(!h(this.redoEnd,this.dateFormat).isAfter(h(this.redoStart,this.dateFormat))){n.create("the end datetime of the redo is incorrect");return}for(const e of this.redo){if(e.inserted==!1){n.create("a previous redo was not bulk inserted yet");return}if(e.idx==this.redoIdx){n.create("this redo is already in the list, please change the idx");return}if(h(e.end).isAfter(h(this.redoStart,this.dateFormat))){n.create("this redo is not starting after the end of a previous redo");return}}this.redo.push({idx:this.redoIdx,pass_percent:this.redoPassPercent,start:h(this.redoStart,this.dateFormat).utc().toDate(),end:h(this.redoEnd,this.dateFormat).utc().toDate(),inserted:!1}),this.redoIdx++,console.log(this.redo)},loadRedo(e){this.redoIdx=e.idx,this.redoStart=h(e.start).format(this.dateFormat),this.redoEnd=h(e.end).format(this.dateFormat),this.redoPassPercent=e.pass_percent},setRedo(){for(let e=0;e<this.redo.length;e++)this.redo[e].idx==this.redoIdx&&(this.redo[e].start=h(this.redoStart,this.dateFormat).toDate(),this.redo[e].end=h(this.redoEnd,this.dateFormat).toDate(),this.redo[e].pass_percent=this.redoPassPercent)},clearRedo(){this.redoIdx=this.redo.length+1,this.redoPassPercent=100,this.redoStart=h().format(this.dateFormat),this.redoEnd=h().format(this.dateFormat)}}}),V=T("examAnswersS",{state:()=>({upToPercent:100,progress_message:"",filter:"",selectedStudents:[],studentColumns:[{label:"id",name:"id",field(e){var t;return(t=e.student)==null?void 0:t.id}},{label:"username",name:"username",sortable:!0,field(e){var t,s;return(s=(t=e.student)==null?void 0:t.user)==null?void 0:s.username}},{label:"phone",name:"phone",sortable:!0,field(e){var t,s,r;return(r=(s=(t=e.student)==null?void 0:t.user)==null?void 0:s.profile)==null?void 0:r.phoneNumber}},{label:"previous exam answer redo",name:"previous exam answer redo",field(e){var t;return(t=e.examAnswer)==null?void 0:t.redo_idx}},{label:"previous exam answer percent",name:"previous exam answer percent",field(e){var t,s,r,o;return e.examAnswer==null||((t=e.examAnswer)==null?void 0:t.status)!="taken"&&((r=(s=e.examAnswer)==null?void 0:s.score)!=null?r:0)==0?"NA":(o=e.examAnswer)==null?void 0:o.percent},sortable:!0,sort:(e,t)=>{var s,r,o,l;return((r=(s=e.examAnswer)==null?void 0:s.percent)!=null?r:0)-((l=(o=t.examAnswer)==null?void 0:o.percent)!=null?l:0)}},,{label:"previous exam answer status",name:"previous exam answer status",field(e){var t;return(t=e.examAnswer)==null?void 0:t.status},sortable:!0}],redo:null,ready:!1,one:null,showReviewDialog:!1,review_columns:[{label:"ID",name:"ID",field:e=>e.id},{label:"Student",name:"Student",field:e=>{var t,s,r;return(r=(s=(t=e.student)==null?void 0:t.user)==null?void 0:s.profile)==null?void 0:r.name}},{label:"Score",name:"Score",field:e=>e.percent},{name:"actions",label:"actions",field:()=>null}],working:!1,student:null,course:null,examAnswers:[],scoredList:[],lessonsWithMissingExamAnswers:[]}),getters:{filteredStudents(){var e,t,s;return(s=(t=(e=P().selectedCourse)==null?void 0:e.course_students)==null?void 0:t.filter(r=>{var o;return r.examAnswer==null||((o=r.examAnswer)==null?void 0:o.percent)<=this.upToPercent}))!=null?s:[]}},actions:{async sendScoreNotifications(){var l,c,d,i,f,p,m,w;const e=[],t=[],s=y(),r=L(),o=P();if(s.examLessonAttendance.forEach(a=>{var A,S,Y,b,E,F,C,v,M,I,u,x,g,D,q,N;(a==null?void 0:a.score)!=null&&((Y=(S=(A=a==null?void 0:a.student)==null?void 0:A.user)==null?void 0:S.profile)==null?void 0:Y.fcmtoken)!=null&&((F=(E=(b=a==null?void 0:a.student)==null?void 0:b.user)==null?void 0:E.profile)==null?void 0:F.fcmtoken.length)>0&&(((M=(v=(C=a==null?void 0:a.student)==null?void 0:C.user)==null?void 0:v.profile)==null?void 0:M.lang)!="ar"?e.push((x=(u=(I=a==null?void 0:a.student)==null?void 0:I.user)==null?void 0:u.profile)==null?void 0:x.fcmtoken):t.push((q=(D=(g=a==null?void 0:a.student)==null?void 0:g.user)==null?void 0:D.profile)==null?void 0:q.fcmtoken),(N=a.student.parents)==null||N.forEach(z=>{z.fcmtoken!=null&&z.fcmtoken.length>0&&(z.lang!="ar"?e.push(z.fcmtoken):t.push(z.fcmtoken))}))}),((l=r.exam)==null?void 0:l.course)!=null&&(e.length>0||t.length>0)){const a=(c=Z().user)==null?void 0:c.courseOptions.filter(A=>{var S;return A.value.id==((S=r.exam)==null?void 0:S.course.id)})[0].value;if(a==null)throw Error("couldn't find course");await o.sendNotificationToSomeStudents(a,e,t,`Exam score has been published - ${(f=(i=(d=a==null?void 0:a.instructor)==null?void 0:d.user)==null?void 0:i.profile)==null?void 0:f.name}`,`\u0638\u0647\u0631\u062A \u0646\u062A\u064A\u062C\u0629 \u0627\u0645\u062A\u062D\u0627\u0646 - ${(w=(m=(p=a==null?void 0:a.instructor)==null?void 0:p.user)==null?void 0:m.profile)==null?void 0:w.name}`),console.info("tokens found, will send notifications")}else console.error("not tokens found, will not send notifications")},async bulkInsertOfflineScores(){var o,l,c,d,i,f,p,m,w,a,A,S,Y,b,E,F,C,v,M,I;if(this.working)return;const e=L(),t=y();await this.getByExam(e.exam);const s=[];this.working=!0;for(const u of t.examLessonAttendance){if((u==null?void 0:u.score)==null)continue;let x=!1;for(const g of this.scoredList)if(((o=g.student)==null?void 0:o.id)==((l=u==null?void 0:u.student)==null?void 0:l.id))if(g.score==null&&(u==null?void 0:u.score)!=null){if((await k.delete(`/exam-answers/${g.id}`,_())).status!=200){n.create("some empty answers were not deleted successfully, please try again"),this.working=!1;return}}else x=!0;if(!x){for(const g of s)if(g.student==((c=u==null?void 0:u.student)==null?void 0:c.id)){const D=parseInt((i=(d=u==null?void 0:u.score)==null?void 0:d.toString())!=null?i:"0"),q=parseFloat((m=(p=(f=e.exam)==null?void 0:f.total_score)==null?void 0:p.toString())!=null?m:"1");x=!0,g.score==null&&u.score!=null&&(g.score=D,g.percent=(u==null?void 0:u.score)==null?null:parseInt((D/q*100).toFixed()),g.status=(u==null?void 0:u.score)!=null?"taken":"created")}}if(!x){const g=parseInt((a=(w=u==null?void 0:u.score)==null?void 0:w.toString())!=null?a:"0"),D=parseFloat((Y=(S=(A=e.exam)==null?void 0:A.total_score)==null?void 0:S.toString())!=null?Y:"1");s.push({student:(E=(b=u==null?void 0:u.student)==null?void 0:b.id)!=null?E:-1,exam:(C=(F=e.exam)==null?void 0:F.id)!=null?C:-1,course:(v=e.exam)==null?void 0:v.course.id,questions:[],percent:(u==null?void 0:u.score)==null?null:parseInt((g/D*100).toFixed()),score:(u==null?void 0:u.score)==null?null:g,redo_idx:(M=this.redo)==null?void 0:M.idx,status:(u==null?void 0:u.score)!=null?"taken":"created",pass_percent:(I=this.redo)==null?void 0:I.pass_percent})}}const r=await k.post("/exam-answers",s,_());r.status==200?(e.exam!=null&&await this.getByOfflineExam(e.exam),await this.sendScoreNotifications(),t.examLessonAttendance.forEach(u=>{u!=null&&(u.score=null)}),n.create("done")):(n.create("error in bulk insert"),console.log("error in bulk insert"),console.log(r.data)),this.working=!1},async bulkInsert(e){var l;const t=L(),s=P();if(this.redo==null||this.redo.inserted==!0){n.create("error in bulk insert");return}const r=this.selectedStudents.map(c=>{var d,i,f,p,m,w,a;return{student:(i=(d=c.student)==null?void 0:d.id)!=null?i:-1,exam:(p=(f=t.exam)==null?void 0:f.id)!=null?p:-1,course:(m=parseInt(e.id))!=null?m:-1,questions:[],percent:0,score:0,redo_idx:(w=this.redo)==null?void 0:w.idx,status:"created",pass_percent:(a=this.redo)==null?void 0:a.pass_percent}});await t.update(t.exam,e.id,e.lessonId);const o=await k.post("/exam-answers",r,_());if(o.status==200||o.status==201){for(let i=0;i<t.redo.length;i++)t.redo[i].idx==((l=this.redo)==null?void 0:l.idx)&&(t.redo[i].inserted=!0);this.redo.inserted=!0,await t.update(t.exam,e.id,e.lessonId);const c=this.selectedStudents.filter(i=>{var f,p,m,w,a,A,S,Y,b;return((m=(p=(f=i.student)==null?void 0:f.user)==null?void 0:p.profile)==null?void 0:m.lang)!="ar"&&((A=(a=(w=i.student)==null?void 0:w.user)==null?void 0:a.profile)==null?void 0:A.fcmtoken)!=null&&((b=(Y=(S=i.student)==null?void 0:S.user)==null?void 0:Y.profile)==null?void 0:b.fcmtoken.length)>0}).map(i=>{var f,p,m;return(m=(p=(f=i.student)==null?void 0:f.user)==null?void 0:p.profile)==null?void 0:m.fcmtoken}),d=this.selectedStudents.filter(i=>{var f,p,m,w,a,A,S,Y,b;return((m=(p=(f=i.student)==null?void 0:f.user)==null?void 0:p.profile)==null?void 0:m.lang)=="ar"&&((A=(a=(w=i.student)==null?void 0:w.user)==null?void 0:a.profile)==null?void 0:A.fcmtoken)!=null&&((b=(Y=(S=i.student)==null?void 0:S.user)==null?void 0:Y.profile)==null?void 0:b.fcmtoken.length)>0}).map(i=>{var f,p,m;return(m=(p=(f=i.student)==null?void 0:f.user)==null?void 0:p.profile)==null?void 0:m.fcmtoken});s.selectedCourse!=null&&await s.sendNotificationToSomeStudents(s.selectedCourse,c,d,"there is a new exam redo","\u062A\u0645 \u0641\u062A\u062D \u0645\u0648\u0639\u062F \u062C\u062F\u064A\u062F \u0644\u0627\u0639\u0627\u062F\u0629 \u0627\u0644\u0627\u0645\u062A\u062D\u0627\u0646"),n.create("done"),this.$router.back()}else n.create("error in bulk insert"),console.log("error in bulk insert"),console.log(o.data)},async matchStudentWithExamAnswer(){var s;const e=L(),t=P();if(this.redo=null,e.redo.length==0){n.create("error in matching student with exam answer");return}for(let r=0;r<e.redo.length;r++)e.redo[r].inserted!=!0&&(this.redo=e.redo[r]);if(this.examAnswers.length==0){n.create("no exam answers loaded");return}if(t.selectedCourse!=null){if(t.selectedCourse.course_students=await B(t.selectedCourse),t.selectedCourse.course_students.length==0){n.create("no students loaded");return}for(let r=0;r<t.selectedCourse.course_students.length;r++){const o=t.selectedCourse.course_students[r];for(let l=0;l<this.examAnswers.length;l++){const c=this.examAnswers[l];this.redo!=null&&c.student!=null&&c.student.id==((s=o.student)==null?void 0:s.id)&&c.redo_idx==this.redo.idx-1&&(o.examAnswer=c)}}}},calcScore(){var t,s,r,o,l,c,d;if(this.one==null)throw Error("please select exam answer first");this.one.score=0;let e=0;for(const i of(s=(t=this.one)==null?void 0:t.questions)!=null?s:[]){if(i.score==null&&((r=i.correctAnswer)!=null?r:"")!=""&&i.answer==i.correctAnswer&&(i.score=(o=i.fullScore)!=null?o:1),(i.score==null||i.score<0)&&(i.score=0),((l=i.score)!=null?l:0)>((c=i.fullScore)!=null?c:1))throw console.log(i),n.create("score cannot be > full score"),Error("score cannot be > full score");e+=(d=i.fullScore)!=null?d:1,i.score!=null?this.one.score+=i.score:i.answer==i.correctAnswer&&i.answer!=null&&i.answer.length>0&&this.one.score++}return this.one.percent=Math.ceil(this.one.score/e*100),!0},async update(){if(this.one==null)return;if(this.answerNeedReview(this.one)){n.create("error, you should score all remaining questions first");return}if(this.working){n.create("please wait, still working");return}this.working=!0,console.log("will calc total score"),this.progress_message="will calc total score";let e=!1;try{e=this.calcScore()}catch(t){console.log("error calculating total score"),n.create("error calculating total score"),console.log(t)}if(!e){this.working=!1;return}try{console.log("will update document"),this.progress_message="will update document",await U(this.one)&&(this.examAnswers.splice(this.examAnswers.indexOf(this.one),1),await this.sendWhatsappMessage(),await this.sendNotification(),console.log("will hide dialog"),this.progress_message="",this.showReviewDialog=!1)}catch(t){n.create("error updating exam answer"),console.log("error updating exam answer"),console.log(t);return}this.working=!1},async sendNotification(){var e,t,s,r,o,l,c,d,i;try{((r=(s=(t=(e=this.one)==null?void 0:e.student)==null?void 0:t.user)==null?void 0:s.profile)==null?void 0:r.fcmtoken)!=null&&(console.log("will send notification"),this.progress_message="will send notification",await k.post("/faculties/notification",{title:"STDY",message:"\u0644\u0642\u062F \u0638\u0647\u0631\u062A \u0646\u062A\u064A\u062C\u0629 \u0627\u0644\u0627\u0645\u062A\u062D\u0627\u0646 \u0627\u0644\u062E\u0627\u0635 \u0628\u0643.",tokens:[(d=(c=(l=(o=this.one)==null?void 0:o.student)==null?void 0:l.user)==null?void 0:c.profile)==null?void 0:d.fcmtoken],type:"exam",id:(i=O().lesson)==null?void 0:i.exam.id},_()))}catch(f){n.create("error sending notification"),console.log("error sending notification"),console.log(f)}this.sendParentNotification()},async sendParentNotification(){var e,t,s,r,o,l,c,d,i,f,p;try{if(((t=(e=this.one)==null?void 0:e.student)==null?void 0:t.parents)!=null&&((r=(s=this.one)==null?void 0:s.student)==null?void 0:r.parents.length)>0){const m=[];for(const w of(l=(o=this.one)==null?void 0:o.student)==null?void 0:l.parents)w.fcmtoken!=null&&w.fcmtoken.length>0&&m.push(w.fcmtoken);console.log("will send parent notification"),this.progress_message="will send parent notification",await k.post("/faculties/notification",{title:"STDY",message:`\u0644\u0642\u062F \u0638\u0647\u0631\u062A \u0646\u062A\u064A\u062C\u0629 \u0627\u0644\u0627\u0645\u062A\u062D\u0627\u0646 \u0627\u0644\u062E\u0627\u0635 \u0628 ${(f=(i=(d=(c=this.one)==null?void 0:c.student)==null?void 0:d.user)==null?void 0:i.profile)==null?void 0:f.name}.`,tokens:m,type:"exam",id:(p=O().lesson)==null?void 0:p.exam.id},_())}}catch(m){n.create("error sending parent notification"),console.log("error sending parent notification"),console.log(m)}},async sendWhatsappMessage(){var e,t,s,r;try{((r=(s=(t=(e=this.one)==null?void 0:e.student)==null?void 0:t.user)==null?void 0:s.profile)==null?void 0:r.parentPhoneNumber)!=null&&console.log("will send whatsapp message")}catch(o){n.create("error sending whatsapp message"),console.log("error sending whatsapp message"),console.log(o)}},async query(e,t){var s,r;if(console.log("getting exam answers"),((s=this.student)==null?void 0:s.id)==e.id&&((r=this.course)==null?void 0:r.id)==t.id){console.log("already loaded");return}this.working=!0,this.examAnswers=await X(e.id,t.id),this.lessonsWithMissingExamAnswers=t.lessons.filter(o=>{var l,c;if(o.has_exam!=!0)return!1;for(const d of this.examAnswers)if(((c=(l=d.exam)==null?void 0:l.lesson)==null?void 0:c.id)==o.id)return!1;return!0}),this.working=!1},needReview(e){return(e.correctAnswer==null||e.correctAnswer==null||e.correctAnswer=="")&&(e.score==null||e.score==null)&&(e.answer!=null||e.answerImage!=null)},answerNeedReview(e){for(const t of e.questions)if(this.needReview(t))return!0;return!1},async getByExam(e){if(!this.working){console.log("getting exam answers for exam: "+e.id),this.working=!0;try{const t=await $(e.id);this.examAnswers=[];for(const s of t)this.answerNeedReview(s)?this.examAnswers.push(s):this.scoredList.push(s)}catch{}this.ready=!0,this.working=!1}},async getByOfflineExam(e){if(!this.working){console.log("getting exam answers for exam: "+e.id),this.working=!0;try{this.scoredList=await $(e.id)}catch{}this.ready=!0,this.working=!1}},async delete(e){(await k.delete(`/exam-answers/${e.id}`,_())).status==200?(this.scoredList=this.scoredList.filter(s=>s.id!=e.id),n.create("deleted")):n.create("error")},generateOnlineExamXlsxReport(e,t,s){var c,d,i,f,p,m,w,a,A,S,Y,b,E,F,C,v,M,I,u;t.length==0&&n.create("no students found!"),s.length==0&&n.create("no answers found!"),e.total_score==null&&n.create("total score is null!"),console.log(s);const r=[];for(const x of t){let g=null;for(const q of s)((c=q.student)==null?void 0:c.id)==((d=x==null?void 0:x.student)==null?void 0:d.id)&&(g=q,q.found=!0);const D={name:(p=(f=(i=x.student)==null?void 0:i.user)==null?void 0:f.profile)==null?void 0:p.name,phone:(a=(w=(m=x.student)==null?void 0:m.user)==null?void 0:w.profile)==null?void 0:a.phoneNumber,group:(A=x.group)!=null?A:"no group in subscription",score:(S=g==null?void 0:g.score)!=null?S:"N/A","total score":(Y=g==null?void 0:g.questions.map(q=>{var N;return(N=q.fullScore)!=null?N:1}).reduce((q,N)=>q+N))!=null?Y:"no answer found"};r.push(D)}for(const x of s)x.found||r.push({name:(F=(E=(b=x.student)==null?void 0:b.user)==null?void 0:E.profile)==null?void 0:F.name,phone:(M=(v=(C=x.student)==null?void 0:C.user)==null?void 0:v.profile)==null?void 0:M.phoneNumber,group:"not subscribed to course",score:(I=x==null?void 0:x.score)!=null?I:"N/A","total score":(u=x==null?void 0:x.questions.map(g=>{var D;return(D=g.fullScore)!=null?D:1}).reduce((g,D)=>g+D))!=null?u:"no answer found"});const o=R.json_to_sheet(r),l=R.book_new();R.book_append_sheet(l,o,"exam-report"),Q(l,"exam-report.xlsx",{compression:!0})}}});export{L as a,P as c,V as e,O as l};
